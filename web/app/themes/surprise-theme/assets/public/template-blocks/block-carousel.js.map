{"version":3,"sources":["block-carousel.js"],"names":["defaults","animationDuration","rewindDuration","Sdc_Carousel","[object Object]","selector","options","this","selectorInner","querySelector","settings","mergeOptions","transitionProperty","start","Object","assign","elem","Array","prototype","filter","call","parentNode","children","sibling","element","style","transitionDuration","activeSlide","nextSlide","nextElementSibling","classList","remove","add","setTimeout","change","move","setInterval","imageCarousel","document","init"],"mappings":"AAOA,MAAMA,SAAW,CACfC,kBAAmB,IACnBC,eAAgB,KAElB,MAAMC,aACJC,YAAYC,EAAUC,EAAU,IAC9BC,KAAKF,SAAWA,EAChBE,KAAKC,cAAgBH,EAASI,cAAc,uBAC5CF,KAAKG,SAAWH,KAAKI,aAAaX,SAAUM,GAG9CF,OACEG,KAAKK,qBACLL,KAAKM,QASPT,aAAaJ,EAAUU,GAErB,OADcI,OAAOC,OAAO,GAAIf,EAAUU,GAS5CN,SAASY,GACP,OAAOC,MAAMC,UAAUC,OAAOC,KAAKJ,EAAKK,WAAWC,SAAUC,GACpDA,IAAYP,GAOvBZ,qBACEa,MAAMC,UAAUC,OAAOC,KAAKb,KAAKF,SAASI,cAAc,uBAAuBa,SAAUE,IACvFA,EAAQC,MAAMC,mBAAwBnB,KAAKG,SAAST,kBAAjB,OAQvCG,SACE,IAAIuB,EAAcpB,KAAKF,SAASI,cAAc,WAC5CmB,EAAaD,EAAYE,mBAAsDF,EAAYE,mBAA7CtB,KAAKC,cAAcc,SAAS,GAC5EK,EAAYG,UAAUC,OAAO,UAC7BH,EAAUE,UAAUE,IAAI,UAM1B5B,QACE6B,WAAW,KACT1B,KAAK2B,SACL3B,KAAK4B,QACJ5B,KAAKG,SAASR,gBAMnBE,OACEgC,YAAY,KACV7B,KAAK2B,UACJ3B,KAAKG,SAASR,iBAKrB,MAAMmC,cAAgB,KACpB,IAAMC,SAAS7B,cAAc,iBAAkB,OAAO,EACtD,IAAIN,aAAamC,SAAS7B,cAAc,iBAAkB,CACxDP,eAAgB,IAChBD,kBAAmB,MAClBsC,QAELF","file":"block-carousel.js","sourcesContent":["/**\r\n *\r\n * @param {String} selector\r\n * @param {Object} options\r\n * @returns\r\n */\r\n\r\nconst defaults = {\r\n  animationDuration: 200,\r\n  rewindDuration: 1000\r\n}\r\nclass Sdc_Carousel {\r\n  constructor(selector, options = {}) {\r\n    this.selector = selector;\r\n    this.selectorInner = selector.querySelector('.sdc-carousel-inner');\r\n    this.settings = this.mergeOptions(defaults, options);\r\n  }\r\n\r\n  init() {\r\n    this.transitionProperty()\r\n    this.start();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} defaults\r\n   * @param {Object} settings\r\n   * @returns Object\r\n   */\r\n  mergeOptions(defaults, settings) {\r\n    let options = Object.assign({}, defaults, settings)\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} elem\r\n   * @returns Object\r\n   */\r\n  siblings(elem) {\r\n    return Array.prototype.filter.call(elem.parentNode.children, sibling => {\r\n      return sibling !== elem;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set transition value for each item\r\n   */\r\n  transitionProperty() {\r\n    Array.prototype.filter.call(this.selector.querySelector('.sdc-carousel-inner').children, element => {\r\n      element.style.transitionDuration = `${this.settings.animationDuration}ms`;\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Rewind to the next slide\r\n   */\r\n  change() {\r\n    let activeSlide = this.selector.querySelector('.active'),\r\n      nextSlide = !activeSlide.nextElementSibling ? this.selectorInner.children[0] : activeSlide.nextElementSibling;\r\n    activeSlide.classList.remove('active');\r\n    nextSlide.classList.add('active');\r\n  }\r\n\r\n  /**\r\n   * Start animation\r\n   */\r\n  start() {\r\n    setTimeout(() => {\r\n      this.change()\r\n      this.move();\r\n    }, this.settings.rewindDuration);\r\n  }\r\n\r\n  /**\r\n   * Loop\r\n   */\r\n  move() {\r\n    setInterval(() => {\r\n      this.change()\r\n    }, this.settings.rewindDuration)\r\n  }\r\n}\r\n\r\n\r\nconst imageCarousel = () => {\r\n  if ( !document.querySelector('.sdc-carousel')) return false;\r\n  new Sdc_Carousel(document.querySelector('.sdc-carousel'), {\r\n    rewindDuration: 2000,\r\n    animationDuration: 500,\r\n  }).init();\r\n}\r\nimageCarousel()"]}